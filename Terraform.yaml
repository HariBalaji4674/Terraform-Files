# Session-24: About IaaC ,AWS CLI,IAM SetUP,ENV Setup Terraform

Infrastructure as a code --> IaaC:
    Creating infra manually takes more time and more cost effective
1) What is Infrastructure:
    Creating the servers to deploy the services/applications manually or Automatically.
2) What is Inframanagement :
    Managing The infra and Creating the Services through manually or automation is called management
3) What is InfraStructure as a Code:
    Creating the Infrastructure using the code or scripting is called the IaaC
4) What is Best IaaC Tool:
    Terraform is the popular IaaC Tool.
5) What is Terraform :
    Terraform is an infrastructure as code tool that lets you build, change, and version cloud and on-prem resources safely and efficiently.
6) What are Advantages of using Terraform:
    1. Since Terraform is a code we will save that code as Version Control
    2. Consistent Infrastructure --> For every environment the same set up will happen
    3. Create Read Update Delete the Configuration
    4. Inventory Management --> we can easily get the list of resources created.
    5. Cost Optimization  --> When ever we need we can run and create the infra and if not required we can delete the infra
    6. Dependency Management
        we can automatically create each service dynamically
    7. Terraform Modules --> ReUse the code
        Where we can build the resouces based on modules
    8. Terraform is declarative 
        Simple, Easily Handled, 
7) Does Terraform Support Hybrid Cloud environments :
    Yes Terraform Supports Multicloud Support it will Support  
8) HashiCorp Language Syntax
    Contains:
     Variables
     Data Types
     Conditions
     Loops
     Functions
9) Resource Creation Syntax:
    resource "what resource" "name of resources" {
        arguments/options/parameters
    }
    what-resource --> You need to get

# Topics discussed:
    Maps in Variables
    Loops: Count and Count index
    Conditions: When
    Functions: Filters
    Variables: Inputs & Outputs
    Locals
    Data sources
Additional Concepts:
    Map:
#Tags:
    Key-Value Pairs: 
    Name = "Some-Name"
    Environment = DEV/QA/PROD
    Terraform = true
    Component = MongoDB
    Project = Roboshop
Outputs:   Output is the form or getting printed aws resources names or in the console
syntax:
    outputs "outputname"{
        value = "aws.resourcename.id/name"
    }
Conditions:
    expression ? "this will run if true" : "ths will run if false" 
#Loops: 
    Count/Count-Index: Can only be used in module,resource,data blocks not used in outputs,variables,anyother tf files
    Count : 
    Count-index:
    For-Each:

#Functions
   The Terraform language does not support user-defined functions, and so only the functions built in to the language are available for use. 
   Functions are the expressions where it can be called when it is required

#Locals:
    Locals is also a type of variables where it contains both Functions and Expressions used

    Named values which can be assigned and used in code
    it mainly servers the purpose of removing duplication within the terraform code 
    
    When you use locals it removes the duplication within the terraform code and hence it improves the readability of the code

#Data-Sources:
    Querying the resources data dynamically from the source

    Already Available resources are used to create new resource

# For-Each Block
    It will create keyword called each then it will iterate through the each.key and each.value
#Dynamic Block:
    It will be used to Create the Particular configurations inside the resource block which are repetative 
    Keyword Used: Dynamic Block
               dynamic "setting" {
                    for_each  = var.ingressrules
                    content {
                        description = setting.value.description
                    }
                }

# State Files and Remote State Files:
    Session -25 See Video and Abhishek Video Also YouTube
    S3 Bucket and DynamoDB Table.

# tfvars:
    tfvars will be replace the default variable values and metion tf-var variables
    it will be useful when we are developing multi environment 
    for different environments we need to give different s3 bucket and differnt variable names different Dynamodb Table
    ** If we do not mention different backend for differnet environments terraform will always replace the values **
# Commands :
    terraform grep --help
    terraform plan | grep
    terraform init config

    terraform init -reconfigure -backend-config=PROD/backend.tf --> to make the configuration for prod environment
    terraform init -reconfigure -backend-config=DEV/backend.tf --> to make the configuration for DEV Environment


# How to Maintain the different environments in different repositories

# Modules In terraform : Dont Repeat Yourself 
     create one module code to create instances 
     when ever we need to create instances just call the module using module "ec2-create" {source = "path of the module" }


# Cidr Range:

Private IP Ranges:
Private IP ranges are specific blocks of IP addresses reserved for use within private networks and should not be routable on the public internet.

10.0.0.0 to 10.255.255.255 (10.0.0.0/8)
172.16.0.0 to 172.31.255.255 (172.16.0.0/12)
192.168.0.0 to 192.168.255.255 (192.168.0.0/16)
IP Address = Network + Host

VPC :

NAT Gateway:
Elastic IP Address:

What is Parameters Store in Terraform?


Monitoring The Applications:--> Promethus,Grafana,ELK


State and Remote State:
    State is nothing but what resources it is created
    

Tf Vars:
    consistency accross multi environment Dev and Prod 
    we use same code but different variables

    variables mentions in variables.tf file are default values where we can over ride those values using variable.tfvars

    In tfvars everything is key-value pair in tfvars

    terraform plan -var-file=DEV/dev.tfvars 

    if we keep the variables in terrafrom.tfvars file it will be automatically tiggered when we run the command terraform plan and apply 
    
    then we no need to pass anyvalue or commands like -var-file in teraform plan and apply

    in variables if we want to just declare we use like below
    variable "name"{
        type = list/maps
    }
   To Over Ride the default values in terraform we use terraform.tfvars file 

